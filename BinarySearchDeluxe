import edu.princeton.cs.algs4.StdOut;

import java.util.Comparator;

public class BinarySearchDeluxe {

    // Returns the index of the first key in the sorted array a[]
    // that is equal to the search key, or -1 if no such key.
    public static <Key> int firstIndexOf(Key[] a, Key key,
                                         Comparator<Key> comparator) {
        if (a == null || key == null || comparator == null) {
            throw new IllegalArgumentException("Arguments can't be null");
        }
        int lo = 0, hi = a.length - 1;
        int index = 0;
        boolean found = false;

        // Binary search
        while (lo <= hi) {
            int mid = (lo + hi) >>> 1;
            int compare = comparator.compare(key, a[mid]);
            if (compare < 0) {
                hi = mid - 1;
            }
            else if (compare > 0) {
                lo = mid + 1;
            }
            else {
                index = mid;
                found = true;
                break;
            }
        }
        if (!found)
            return -1;

        int lowestIndex = index;
        while (lo <= index) {
            int mid = (lo + index) >>> 1;
            int compare = comparator.compare(key, a[mid]);
            if (compare == 0) {
                index = mid - 1;
                lowestIndex = mid;
            }

            else {
                lo = mid + 1;
            }
        }
        return lowestIndex;
    }

    // Returns the index of the last key in the sorted array a[]
    // that is equal to the search key, or -1 if no such key.
    public static <Key> int lastIndexOf(Key[] a, Key key, Comparator<Key> comparator) {
        if (a == null || key == null || comparator == null) {
            throw new IllegalArgumentException("Arguments can't be null");
        }
        int lo = 0, hi = a.length - 1;
        int index = 0;
        boolean found = false;

        // Binary Search
        while (lo <= hi) {
            int mid = (lo + hi) >>> 1;
            int compare = comparator.compare(key, a[mid]);
            if (compare < 0) {
                hi = mid - 1;
            }
            else if (compare > 0) {
                lo = mid + 1;
            }
            else {
                index = mid;
                found = true;
                break;
            }
        }
        if (!found)
            return -1;

        int highestIndex = index;
        while (index <= hi) {
            int mid = (hi + index) >>> 1;
            int compare = comparator.compare(key, a[mid]);
            if (compare == 0) {
                index = mid + 1;
                highestIndex = mid;
            }
            else {
                hi = mid - 1;
            }
        }
        return highestIndex;
    }

    // unit testing (required)
    public static void main(String[] args) {
        Comparator<Term> comparison = Term.byPrefixOrder(3);

        Term[] terms = new Term[3]; // new array to store matches
        Term prefix1 = new Term("abc", 0);

        terms[0] = new Term("abc", 1);
        terms[1] = new Term("abcd", 1);
        terms[2] = new Term("abcde", 1);

        StdOut.println(firstIndexOf(terms, prefix1, comparison));
        StdOut.println(lastIndexOf(terms, prefix1, comparison));
    }
}
